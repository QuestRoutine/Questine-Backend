generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  user_id              Int                    @id @default(autoincrement())
  login_type           String?
  email                String                 @unique @db.VarChar
  password             String                 @db.VarChar
  nickname             String?                @unique @db.VarChar
  push_token           String?
  created_at           DateTime               @default(now()) @db.Timestamptz(6)
  updated_at           DateTime               @default(now()) @db.Timestamptz(6)
  deleted_at           DateTime?              @db.Timestamptz(6)
  refresh_token        String?
  achievement_progress achievement_progress[]
  characters           characters[]
  exp_logs             exp_logs[]
  profile              profile?
  todo_logs            todo_logs[]
  todos                todos[]
}

model todos {
  todo_id      Int         @id @default(autoincrement())
  user_id      Int
  content      String      @db.VarChar
  completed    Boolean?    @default(false)
  exp_reward   Int         @default(0)
  exp_given    Boolean?    @default(false)
  created_at   DateTime?   @default(now()) @db.Timestamptz(6)
  completed_at DateTime?   @db.Timestamptz(6)
  updated_at   DateTime?   @default(now()) @db.Timestamptz(6)
  due_at       DateTime?   @db.Timestamptz(6)
  exp_logs     exp_logs[]
  todo_logs    todo_logs[]
  users        users       @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)

  @@index([user_id, due_at], map: "idx_todos_user_id_due_at")
}

model exp_logs {
  exp_log_id   Int         @id @default(autoincrement())
  user_id      Int?
  todo_id      Int?
  character_id Int?
  exp          Int
  created_at   DateTime?   @default(now()) @db.Timestamptz(6)
  characters   characters? @relation(fields: [character_id], references: [character_id], onUpdate: NoAction)
  todos        todos?      @relation(fields: [todo_id], references: [todo_id], onUpdate: NoAction)
  users        users?      @relation(fields: [user_id], references: [user_id], onUpdate: NoAction)
}

model todo_logs {
  todo_log_id      Int      @id @default(autoincrement())
  user_id          Int?
  todo_id          Int?
  todo_id_snapshot Int
  action           String   @db.VarChar
  created_at       DateTime @default(now()) @db.Timestamptz(6)
  todos            todos?   @relation(fields: [todo_id], references: [todo_id], onUpdate: NoAction)
  users            users?   @relation(fields: [user_id], references: [user_id], onDelete: Restrict, onUpdate: NoAction)
}

model profile {
  profile_id            Int       @id @default(autoincrement())
  user_id               Int       @unique
  avatar_url            String?
  join_date             DateTime  @default(dbgenerated("CURRENT_DATE")) @db.Date
  total_completed_tasks Int?      @default(0)
  current_streak        Int?      @default(0)
  longest_streak        Int?      @default(0)
  weekly_avg_completion Int?      @default(0)
  most_productive_day   String?
  most_productive_time  String?
  created_at            DateTime? @default(now()) @db.Timestamptz(6)
  updated_at            DateTime? @default(now()) @db.Timestamptz(6)
  users                 users     @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
}

model achievements {
  achievement_id       Int                    @id @default(autoincrement())
  title                String                 @db.VarChar
  description          String?
  icon                 String?                @db.VarChar
  max_progress         Int?                   @default(1)
  reward_xp            Int?                   @default(0)
  reward_gold          Int?                   @default(0)
  created_at           DateTime?              @db.Timestamptz(6)
  updated_at           DateTime?              @db.Timestamptz(6)
  achievement_progress achievement_progress[]
}

model achievement_progress {
  user_id        Int
  achievement_id Int
  progress       Int?         @default(0)
  is_unlocked    Boolean?     @default(false)
  unlocked_at    DateTime?    @db.Timestamptz(6)
  created_at     DateTime?    @db.Timestamptz(6)
  updated_at     DateTime?    @db.Timestamptz(6)
  achievements   achievements @relation(fields: [achievement_id], references: [achievement_id], onDelete: Cascade, onUpdate: NoAction)
  users          users        @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)

  @@id([user_id, achievement_id])
}

model character_items {
  character_item_id Int         @id @default(autoincrement())
  character_id      Int?
  item_id           Int?
  quantity          Int?        @default(1)
  durability        Int?
  is_equipped       Boolean?    @default(false)
  acquired_at       DateTime?   @default(now()) @db.Timestamptz(6)
  characters        characters? @relation(fields: [character_id], references: [character_id], onDelete: Cascade, onUpdate: NoAction)
  items             items?      @relation(fields: [item_id], references: [item_id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([character_id, item_id])
}

model characters {
  character_id    Int               @id @default(autoincrement())
  user_id         Int
  character_name  String            @db.VarChar
  level           Int               @default(1)
  exp             Int               @default(0)
  gold            Int               @default(0)
  created_at      DateTime          @default(now()) @db.Timestamptz(6)
  updated_at      DateTime          @default(now()) @db.Timestamptz(6)
  character_items character_items[]
  users           users             @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
  equipped_items  equipped_items[]
  exp_logs        exp_logs[]
  level_up_logs   level_up_logs[]

  @@unique([user_id, character_name])
}

model equipped_items {
  equipped_item_id Int        @id @default(autoincrement())
  character_id     Int
  item_id          Int
  slot             String
  equipped_at      DateTime?  @default(now()) @db.Timestamptz(6)
  characters       characters @relation(fields: [character_id], references: [character_id], onDelete: Cascade, onUpdate: NoAction)
  items            items      @relation(fields: [item_id], references: [item_id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([character_id, slot])
}

model items {
  item_id         Int               @id @default(autoincrement())
  name            String            @db.VarChar
  type            String
  price           Int
  required_level  Int?              @default(1)
  description     String?
  image_url       String?
  stats           Json?
  effect          String?
  created_at      DateTime?         @default(now()) @db.Timestamptz(6)
  updated_at      DateTime?         @default(now()) @db.Timestamptz(6)
  character_items character_items[]
  equipped_items  equipped_items[]
}

model level_requirements {
  level        Int @id
  required_exp Int
}

model level_up_logs {
  level_up_log_id Int         @id @default(autoincrement())
  character_id    Int?
  previous_level  Int
  new_level       Int
  leveled_up_at   DateTime?   @default(now()) @db.Timestamptz(6)
  characters      characters? @relation(fields: [character_id], references: [character_id], onDelete: Cascade, onUpdate: NoAction)
}
